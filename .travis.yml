# The language in this case has no bearing - we are going to be making use of "conda" for a
# python distribution for the scientific python stack.
os:
  - linux
  - osx

env:
    global:
        - TARGET_ARCH="x64"
        # BINSTAR_TOKEN
        - secure: "GUZgrWEs3UL+lD8L59QuWgj07nK6qsTbW6Y7g9ryWiYeohJ0BmovCf+904LodRRDUWTuTx9SSpISvDU28Dj5I0rPLKDiqyrSrEFF0sm/MttNlrfcRso+lmdBStbtlqki9TrWo6qdTBKkmHYgiWGJEewDBuRZxxtcJBkU7NdtsGBr+srtk1fwRR1dSKf00XGaCQzrgjFuzkHv8NB6DMZQvt+vMolmQlw2wRtGrKFb465OKw6aVXDOWtRo5VvSTz9bLT6F1VYjmQfOfn/wa5Svb59m+55EXRQX0dp5Rarv9GfErQ6TBCW0vMEYjFC7puY9esE9zwT25xjxkghhYi4l+8PWNMl1jW33e26G5RiOyj0kiozHCtrVS7M6GnYvuVGTgHysZtacl572NOLvX06VKJxQJoihzlMC8ILb9LljoK6/buEjyaUY1B2dGZ5pCeksZNsBidMfk8kTQp460ZHbeayh0VzhO65L1MoJuxU2IqLHjuNobn86PI1BIu1jqOw+d9og5Kd/X5v3cZiUGr8O3u/RPLKSZ7gF5kLtmvYocOZ7nHihOBXlg3gvVPCs1R57+64SVsdTHVhiUHW8JbcP+G3q2vyVcCYSb5LvwQK7aj7pS4H+6dc9nRd2MWtlW5a13d5sKnnjT+EC5cse+0zx/zYuGG+9z6zCnRrGv6tS63w="
        # TWINE_PASSWORD
        - secure: "nKdr6YBw/J3YRFKL6ZIpFbTMo4cMbaRAND19lP6JSYbhsVcirSqZ/LpxiTPmueFyFDmFrR1LBm3rpUGA6k/Is/HRXSsjFqXfA+5VlxglNvTIUnhRVf9IvZmLVIQdqN/IkWMgYKlkPfyZ9oct9K3CihU6lmGyW/aBf7S7DIV58MJn0HyYV+uMystTD1lEZ3UObhEN35xxmegC6sQe/YAeg656XrXZEjpPijmHXvm8NxmhEolmaZeJ0k1ZN88X8KD/V5d4NiCViiq5oowt0bSVSaGWQMRrrOhJ88m92GxuRyuVT8k1QFT8gkRsi6j3+3LV+MvCLDBzaE0x5/5/ZP6JdxkU4VLTsBceNF4/OQGVA0cCl/ZpV0ZIvrQr70DXmuqKJvW3S7Rkph2hmJBwaKpfYQ9wTI0lMZQb+FYKhV691YNAQYdvRgbCGVUnwRA+mKEWh58wNjjomEcza9eqQUSziaO93e36gwMCdl6ESSBAdWw0Z23CVz37MkJXmoMPpvKghVtvImUFaN0/yHxn21nSP/UK4dhoNbZKX78Ys25pZUk9w8UqCP8cDZlDeqoJ4xLr4GVr5i4stvOmlT8lTec8iwOlcs5S3QxQ5GiVSuC0IhLuppN4/frpD8yrr/bdDgTENjMJWSjIQ5m5JhQKMEU3ZZonXjNANr/IUz8StPyVqU0="
        - CONDA_INSTALL_LOCN="${HOME}/miniconda"
        - TWINE_USERNAME="mwcraig"
    matrix:
        - CONDA_PY=2.7
        - CONDA_PY=3.4
        - CONDA_PY=3.5
        - CONDA_PY=3.6

install:
    # Install and set up miniconda.
    - if [ $TRAVIS_OS_NAME == "linux" ]; then wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; fi
    - if [ $TRAVIS_OS_NAME == "osx" ]; then wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh; fi
    - bash miniconda.sh -b -p $CONDA_INSTALL_LOCN
    - export PATH=${CONDA_INSTALL_LOCN}/bin:$PATH
    - conda config --set always_yes true

    # Gets us vpnotebook
    - conda config --add channels vpython

    - conda update --quiet conda

    # Install a couple of dependencies we need for sure.
    # Not sure why cython is necessary since it is listed as a build dependency.
    - conda install --quiet jinja2 conda-build anaconda-client cython twine

    # make a wheel building environment to ensure correct python version.
    - conda create --quiet -n wheel-build python=$CONDA_PY wheel cython

script:
    # Not much of a real test yet, just try to build myself...
    - conda build --quiet vpython.recipe
    - export CONDA_PACKAGE=`conda build --output vpython.recipe | grep bz2`
    - export OUTPUT_DIR=`dirname $CONDA_PACKAGE`

    # Uncomment the next line when bdist_wheel option in recipe starts
    # paying attention to CONDA_PY. See:
    # https://github.com/conda/conda-build/issues/1832
    # - export WHEEL_PACKAGE="$OUTPUT_DIR/*.whl"
    - source activate wheel-build; python setup.py bdist_wheel; source deactivate
    - export WHEEL_PACKAGE=dist/*.whl
    - echo $CONDA_PACKAGE
    - echo $WHEEL_PACKAGE

    # This will fail if the package does not actually exist
    - ls $CONDA_PACKAGE $WHEEL_PACKAGE
    - if [ $TRAVIS_EVENT_TYPE == "cron" ]; then
        conda install -c astropy -c conda-forge extruder twine;
        copy_packages vp_copy.yaml vpython;
      fi


after_success:
    - echo $TRAVIS_TAG
    - git branch --contains $TRAVIS_TAG
    - if [[ "$TRAVIS_TAG" ]]; then upload_build="true"; else upload_build=; fi
    - echo $upload_build
    # If this build is because of a tag, upload the build if it succeeds.
    - if [ -n "$upload_build" ]; then anaconda -t $BINSTAR_TOKEN upload -u vpython $CONDA_PACKAGE; fi
    # Upload wheel builds to pypi instead of relying on travis deploy because that
    # does not seem to continue gracefully if a distribution already exists,
    # and in most of the jobs a source distribution will already have been
    # uploaded to PyPI.
    #
    # sdist is still uploaded with travis deploy.
    #
    # The twine password has been set in $TWINE_PASSWORD.
    - if [ -n "$upload_build" ]; then twine upload $WHEEL_PACKAGE; fi
    # In any event, remove the built wheel because having it around appears to
    # confuse the deploy step, which is still trying to upload a wheel.
    - rm -f $WHEEL_PACKAGE
deploy:
  provider: pypi
  user: mwcraig
  password:
    secure: t4SUebn2FYy4FK6kLNt//srRvzz7bYhHXT7fMu98svUjwT92InT3TIvpE+6AXvtZeRJL3CnUD9yO6c6xJXZ5Lj4f++P+GA9qz+ji4qBxOHO6qip9eDghwFzSx65pgc5vRMSJnL6h/iFPdfkpG76WNp3OA0vlaRLQw7GSBbV5+ZSpbhIHAPVMoTzDvcmBYe5eszf/Meig6uOdf4yh7Cik0sw/OztXlmq9gRgwVI1CwWkw7uK388yWujul5zpKFvyVBuycrfooGpibtfvZNu6xpVpWnqVT1jnNA9mj03A5wlk7RwmcRabWTa3x2FHJVtnUmDEgMaali4N95Fw3WJi8L6hdNDkkkamfkPEogka7buNpSrkBXW9K722WmxQ6KYA5It2dUO/KkWIaMoIumIuJyWEA6UHih1vxDZyWqCZakqyloE8g9wZGrUPqtpqEFwY4E6f1LesbgWHIrtbm6LOWwltYma0TfTLpAYRCCMTJMAXi3z1udjtrOCt7NEpsJaj17H5wh8nh1XwEpLS9dNcWqtRqqSF5YRHmnFo2TeefIzGH5VDp2PG94bOFTJhKKU224rEHXIo1vb4HyL0Gye7ilyZij5kdSEX6LiJbsmOpPp1e6lc83MIM1x9Cti1inIW4ZH0Y9QhwMd9SnAEr9b8vgOk5ozIi8hZmVtbA8bJhjoc=
  upload_docs: no
  skip_cleanup: true
  on:
    tags: true
    distributions: "sdist"
    repo: BruceSherwood/vpython-jupyter
